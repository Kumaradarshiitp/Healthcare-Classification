# -*- coding: utf-8 -*-
"""Healthcare Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kJWk0uK52AfSyIXSQG9e5DM46YJe1tQ-
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report



# Desabilitar warnings
import warnings
warnings.filterwarnings("ignore")

df = pd.read_csv("/content/healthcare_dataset.csv .zip")

df.head()

df.rename (columns = {'Name' : 'nome', 'Age' : 'idade', 'Gender' : 'genero', 'Doctor' : 'doutor',
                     'Hospital' : 'hospital', 'Room Number' : 'numero_sala', 'Blood Type' : 'tipo_sangue',
                     'Medical Condition' : 'condicao_medica', 'Date of Admission' : 'data_admissao',
                     'Insurance Provider' : 'provedora_seguro', 'Billing Amount' : 'valor_cobranca',
                     'Admission Type' : 'tipo_admissao', 'Discharge Date' : 'data_alta', 'Medication' : 'medicacao',
                     'Test Results' : 'resultado_exame'}, inplace = True )

df.drop(columns=['nome', 'doutor', 'hospital', 'numero_sala', 'data_admissao', 'data_alta'], axis = 1, inplace = True)

df.head()

df.info()

df.describe()

# fundo preto
plt.style.use('dark_background')

# Ajustar espaçamento vertical dos subplots
plt.subplots_adjust(hspace=0.5)

# Criar figura e eixos
fig, axs = plt.subplots(5, 2, figsize=(15, 28))
i = 0
# Loop pelas colunas do DataFrame
for coluna in df.columns:
    # Criar o histograma pra cada coluna
    sns.histplot(data = df, x = coluna, ax = axs[i//2, i%2], palette = 'cool')
    i += 1

# Exibir o plot
plt.show()

# Dividir idades por gênero
idade_masc = [df['idade'][i] for i in range(len(df['idade'])) if df['genero'][i] == 'Male']
idade_fem = [df['idade'][i] for i in range(len(df['idade'])) if df['genero'][i] == 'Female']

# Criar histograma
plt.style.use('dark_background')
plt.figure(figsize = (12, 6))
plt.hist([idade_masc, idade_fem], bins = 7, color = ['darkblue', 'purple'], label = ['Masculino', 'Feminino'])

# Adicionar rótulos e título
plt.xlabel('Idade')
plt.ylabel('Frequência')
plt.title('Histograma de Idade por Gênero')
plt.legend()

# Exibi
plt.show()

# Criar o boxplot
plt.figure(figsize = (10, 6))
sns.boxplot(data = df, x = 'provedora_seguro', y = 'valor_cobranca', palette = 'cool')

# Adicionar título e rótulos
plt.title('Boxplot do Valor de Cobrança por Provedora de Seguro')
plt.xlabel('Provedora de Seguro')
plt.ylabel('Valor de Cobrança')

# Exibir o plot
plt.show()

# Definir estilo com fundo preto
plt.style.use('dark_background')

# Gráfico de Dispersão para Idade vs. Valor de Cobrança
plt.figure(figsize = (8, 6))
plt.scatter(df['idade'], df['valor_cobranca'], alpha = 0.5, color = 'darkblue')
plt.title('Idade vs. Valor de Cobrança')
plt.xlabel('Idade')
plt.ylabel('Valor de Cobrança')
plt.show()

# colunas categoricas
cat_cols = df.select_dtypes(include = ['object']).columns

# encode valores
le = LabelEncoder()
for col in cat_cols:
    le.fit(df[col])
    df[col] = le.transform(df[col])

# grafico para analisar a correlação das variaveis
plt.figure(figsize = (10, 8))
sns.heatmap(df.corr(), annot = True)

# Treino e teste
X = df.drop('resultado_exame', axis = 1)
y = df['resultado_exame']

xtrain, xtest, ytrain, ytest = train_test_split(X, y, test_size = 0.2, random_state = 0)

# Padronizar os dados (importante para o KNN)
scaler = StandardScaler()
xtrain_padronizado = scaler.fit_transform(xtrain)
xtest_padronizado = scaler.transform(xtest)

# Inicializar o classificador KNN
k = 3  # Numero de vizinhos
knn = KNeighborsClassifier(n_neighbors = k)

# Treinar o modelo
knn.fit(xtrain_padronizado, ytrain)

# Fazer previsões
ypred = knn.predict(xtest_padronizado)

class_names = ['Normal', 'Abnormal', 'Inconclusive']
print('Relatório de Classificação\n')
print(classification_report(ytest, ypred, target_names=class_names))